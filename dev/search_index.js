var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TheAlgorithms","category":"page"},{"location":"#TheAlgorithms","page":"Home","title":"TheAlgorithms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TheAlgorithms.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TheAlgorithms]","category":"page"},{"location":"#TheAlgorithms.CompletePack!-Union{Tuple{N}, Tuple{V}, Tuple{N, V, V, V}} where {V<:(AbstractVector{T} where T), N<:Number}","page":"Home","title":"TheAlgorithms.CompletePack!","text":"This does complete/infinite (each item can be chosen infinite times) knapsack : pack capacity = capacity weight of each item = weights value of each item = values dp array is what the function works on It returns the ans (dp[capacity])\n\njulia> dp=zeros(Int,30)\njulia> CompletePack!(20,[1,2,9],[1,3,20],dp)\n43\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.ZeroOnePack!-Union{Tuple{N}, Tuple{V}, Tuple{N, V, V, V}} where {V<:(AbstractVector{T} where T), N<:Number}","page":"Home","title":"TheAlgorithms.ZeroOnePack!","text":"This does 0-1 (each item can be chosen only once) knapsack : pack capacity = capacity weight of each item = weights value of each item = values dp array is what the function works on It returns the ans (dp[capacity])\n\njulia> dp=zeros(Int,30)\njulia> ZeroOnePack!(20,[1,3,11],[2,5,30],dp)\n37\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.abs_max-Tuple{Any}","page":"Home","title":"TheAlgorithms.abs_max","text":"abs_max(x)\n\nProgram to find the max absolute value in a vector\n\nExample\n\nabs_max([1,3,4]) # returns 4\nabs_max([-3,1,2]) # returns -3\nabs_max([-7,-3,6]) #returns -7\n\nContributed By:- Ashwani Rathee\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.abs_min-Tuple{Any}","page":"Home","title":"TheAlgorithms.abs_min","text":"abs_min(num)\n\nProgram to find the min absolute value in a vector\n\nExample\n\nabs_min([1,3,4]) # returns 1\nabs_min([-3,1,2]) # returns 1\nabs_min([-7,-3,6]) #returns -3\n\nContributed By:- Ashwani Rathee\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.abs_val-Tuple{Any}","page":"Home","title":"TheAlgorithms.abs_val","text":"abs_val(num)\n\nProgram to find the absolute value of a number\n\nExample\n\nabs_val(-100) # returns 100\nabs_val(0) # returns 0\nabs(123.1) # returns 123.1\n-1000 == abs_val(-1000) #returns false\n1000 == abs_val(1000) #returns true\n\nContributed By:- Ashwani Rathee\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.area_circle-Tuple{Any}","page":"Home","title":"TheAlgorithms.area_circle","text":"area_circle(radius)\n\nFinds area of the circle\n\nExample\n\narea_circle(20) # returns 1256.6370614359173\narea_circle(-1) # returns DomainError\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.area_ellipse-Tuple{Any, Any}","page":"Home","title":"TheAlgorithms.area_ellipse","text":"area_ellipse(radius_x, radius_y)\n\nFinds area of the ellipse\n\nExample\n\narea_ellipse(10, 10) # returns 314.1592653589793\narea_ellipse(10, 20) # returns 628.3185307179587\narea_ellipse(1, -2) # returns DomainError\narea_ellipse(-1, 2) # returns DomainError\narea_ellipse(-1, -2) # returns DomainError\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.area_heron_triangle-Tuple{Any, Any, Any}","page":"Home","title":"TheAlgorithms.area_heron_triangle","text":"area_heron_triangle(side1, side2, side3)\n\nFinds area of a triangle using heron's formula\n\nExample\n\narea_heron_triangle(5,12,13) # returns 30.0\narea_heron_triangle(-1,-2,1) # returns DomainError\narea_heron_triangle(1,-2,1)  # returns DomainError\narea_heron_triangle(-1,2,1)  # returns DomainError\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.area_parallelogram-Tuple{Any, Any}","page":"Home","title":"TheAlgorithms.area_parallelogram","text":"area_parallelogram(base, height)\n\nFinds area of the parallelogram\n\nExample\n\narea_parallelogram(10,20) # returns 200\narea_parallelogram(-1,-2) # returns DomainError\narea_parallelogram(1,-2)  # returns DomainError\narea_parallelogram(-1,2)  # returns DomainError\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.area_rectangle-Tuple{Any, Any}","page":"Home","title":"TheAlgorithms.area_rectangle","text":"area_rectangle(length, width)\n\nFinds area of the rectangle\n\nExample\n\narea_rectangle(10,20) # returns 200\narea_rectangle(-1,-2) # returns DomainError\narea_rectangle(1,-2)  # returns DomainError\narea_rectangle(-1,2)  # returns DomainError\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.area_rhombus-Tuple{Any, Any}","page":"Home","title":"TheAlgorithms.area_rhombus","text":"area_rhombus(diagonal_1, diagonal_2)\n\nFinds area of the rhombus\n\nExample\n\narea_rhombus(10, 20) # returns 100.0\narea_rhombus(-1,-2) # returns DomainError\narea_rhombus(1,-2)  # returns DomainError\narea_rhombus(-1,2)  # returns DomainError\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.area_square-Tuple{Any}","page":"Home","title":"TheAlgorithms.area_square","text":"area_square(side)\n\nFinds area of the area_square\n\nExample\n\narea_square(10) # returns 100\narea_square(-1) # returns DomainError\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.area_trapezium-Tuple{Any, Any, Any}","page":"Home","title":"TheAlgorithms.area_trapezium","text":"area_trapezium(base1,base2,height)\n\nFinds area of the trapizium\n\nExample\n\narea_trapezium(10, 20, 30)  # returns 450.0\narea_trapezium(-1, -2, -3)  # returns DomainError\narea_trapezium(-1, 2, 3)    # returns DomainError\narea_trapezium(1, -2, 3)    # returns DomainError\narea_trapezium(1, 2, -3)    # returns DomainError\narea_trapezium(-1, -2, 3)   # returns DomainError\narea_trapezium(1, -2, -3)   # returns DomainError\narea_trapezium(-1, 2, -3)   # returns DomainError\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.area_triangle-Tuple{Any, Any}","page":"Home","title":"TheAlgorithms.area_triangle","text":"area_triangle(base, height)\n\nFinds area of the right angled triangle with base height\n\nExample\n\narea_triangle(10,10) # returns 50.0\narea_triangle(-1,-2) # returns DomainError\narea_triangle(1,-2)  # returns DomainError\narea_triangle(-1,2)  # returns DomainError\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.ceil_val-Tuple{Any}","page":"Home","title":"TheAlgorithms.ceil_val","text":"ceil_val(x)\n\nFinds the ceiling of x as an Integer\n\nExample\n\njulia ceil_val(1.3)   # 2.0 ceil_val(2.0)   # returns 2.0 ceil_val(-1.5)  #returns -1.0`\n\nReference\n\nhttps://en.wikipedia.org/wiki/Floorandceiling_functions\n\nContributed By:- Ashwani Rathee\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.count_nucleotides-Tuple{AbstractString}","page":"Home","title":"TheAlgorithms.count_nucleotides","text":"Given: A DNA string s\n\nof length at most 1000 nt.\n\nReturn: Four integers (separated by spaces) counting the respective number of times that the symbols 'A', 'C', 'G', and 'T' occur in s\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.determinant-Tuple{Any}","page":"Home","title":"TheAlgorithms.determinant","text":"Given a non singluar matrix, calculate its determinant using LU decomposition.\n\nL and U are lower triangular and upper triangular matrices respectively such that\n\nA = L*U\n\nIf we want to find the determinant, then\n\ndet(A) = det(LU) = det(L)*det(U)\n\nDeterminant of triangualar matrices is the product of their diagonal entries. Hence, makes finding the determinant easy.\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.dna2rna-Tuple{AbstractString}","page":"Home","title":"TheAlgorithms.dna2rna","text":"Given: A DNA string t\n\nhaving length at most 1000 nt.\n\nReturn: The transcribed RNA string of t\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.euler_method","page":"Home","title":"TheAlgorithms.euler_method","text":"Calculate the solution to a differential equation using forward euler method.\n\n\n\n\n\n","category":"function"},{"location":"#TheAlgorithms.floor_val-Tuple{Any}","page":"Home","title":"TheAlgorithms.floor_val","text":"floor_val(x)\n\nFinds the floor of x as an Integer\n\nExample\n\njulia floor_val(1.3)  # 1 floor_val(2.0)  # returns 2.0 floor_val(-1.7) # returns -2.0`\n\nReference\n\nhttps://en.wikipedia.org/wiki/Floorandceiling_functions\n\nContributed By:- Ashwani Rathee\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.is_armstrong-Tuple{Any}","page":"Home","title":"TheAlgorithms.is_armstrong","text":"Program to check if a number is an Armstrong/Narcissistic number in decimal system.\n\nArmstrong number is a number that is the sum of its own digits raised to the power of the number of digits.\n\nContributed By:- Ashwani Rathee\n\nA positive integer is called an Armstrong number (of order n) if\n\nabcd... = a^n + b^n + c^n + d^n +.... \n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.line_length","page":"Home","title":"TheAlgorithms.line_length","text":"Approximates the arc length of a line segment by treating the curve as a sequence of linear lines and summing their lengths.\n\nArguments:\n\nf: function that returns the arc\nx_start: starting x value\nxend: ending xvalue\nsteps: steps to take for accurace, more the steps greater the accuracy\n\n\n\n\n\n","category":"function"},{"location":"#TheAlgorithms.lu_decompose-Tuple{Any}","page":"Home","title":"TheAlgorithms.lu_decompose","text":"Decomposes a n x n non singular matrix into a lower triangular matrix (L) and an upper triangular matrix (U)\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.surfarea_cube-Tuple{Any}","page":"Home","title":"TheAlgorithms.surfarea_cube","text":"surfarea_cube(side)\n\nFinds surface area of a cube\n\nExample\n\nsurfarea_cube(1)  # returns 6\nsurfarea_cube(3)  # returns 54\nsurfarea_cube(-1) # returns DomainError\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.surfarea_sphere-Tuple{Any}","page":"Home","title":"TheAlgorithms.surfarea_sphere","text":"surfarea_sphere(side)\n\nFinds surface area of a sphere\n\nExample\n\nsurfarea_sphere(5)  # returns 314.1592653589793\nsurfarea_sphere(1)  # returns 12.566370614359172\nsurfarea_sphere(-1) # returns DomainError\n\n\n\n\n\n","category":"method"}]
}

var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TheAlgorithms","category":"page"},{"location":"#TheAlgorithms","page":"Home","title":"TheAlgorithms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TheAlgorithms.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TheAlgorithms]","category":"page"},{"location":"#TheAlgorithms.CompletePack!-Union{Tuple{N}, Tuple{V}, Tuple{N, V, V, V}} where {V<:(AbstractVector{T} where T), N<:Number}","page":"Home","title":"TheAlgorithms.CompletePack!","text":"This does complete/infinite (each item can be chosen infinite times) knapsack : pack capacity = capacity weight of each item = weights value of each item = values dp array is what the function works on It returns the ans (dp[capacity])\n\njulia> dp=zeros(Int,30)\njulia> CompletePack!(20,[1,2,9],[1,3,20],dp)\n43\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.ZeroOnePack!-Union{Tuple{N}, Tuple{V}, Tuple{N, V, V, V}} where {V<:(AbstractVector{T} where T), N<:Number}","page":"Home","title":"TheAlgorithms.ZeroOnePack!","text":"This does 0-1 (each item can be chosen only once) knapsack : pack capacity = capacity weight of each item = weights value of each item = values dp array is what the function works on It returns the ans (dp[capacity])\n\njulia> dp=zeros(Int,30)\njulia> ZeroOnePack!(20,[1,3,11],[2,5,30],dp)\n37\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.count_nucleotides-Tuple{AbstractString}","page":"Home","title":"TheAlgorithms.count_nucleotides","text":"Given: A DNA string s\n\nof length at most 1000 nt.\n\nReturn: Four integers (separated by spaces) counting the respective number of times that the symbols 'A', 'C', 'G', and 'T' occur in s\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.determinant-Tuple{Any}","page":"Home","title":"TheAlgorithms.determinant","text":"Given a non singluar matrix, calculate its determinant using LU decomposition.\n\nL and U are lower triangular and upper triangular matrices respectively such that\n\nA = L*U\n\nIf we want to find the determinant, then\n\ndet(A) = det(LU) = det(L)*det(U)\n\nDeterminant of triangualar matrices is the product of their diagonal entries. Hence, makes finding the determinant easy.\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.dna2rna-Tuple{AbstractString}","page":"Home","title":"TheAlgorithms.dna2rna","text":"Given: A DNA string t\n\nhaving length at most 1000 nt.\n\nReturn: The transcribed RNA string of t\n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.euler_method","page":"Home","title":"TheAlgorithms.euler_method","text":"Calculate the solution to a differential equation using forward euler method.\n\n\n\n\n\n","category":"function"},{"location":"#TheAlgorithms.is_armstrong-Tuple{Any}","page":"Home","title":"TheAlgorithms.is_armstrong","text":"Program to check if a number is an Armstrong/Narcissistic number in decimal system.\n\nArmstrong number is a number that is the sum of its own digits raised to the power of the number of digits.\n\nContributed By:- Ashwani Rathee\n\nA positive integer is called an Armstrong number (of order n) if\n\nabcd... = a^n + b^n + c^n + d^n +.... \n\n\n\n\n\n","category":"method"},{"location":"#TheAlgorithms.line_length","page":"Home","title":"TheAlgorithms.line_length","text":"Approximates the arc length of a line segment by treating the curve as a sequence of linear lines and summing their lengths.\n\nArguments:\n\nf: function that returns the arc\nx_start: starting x value\nxend: ending xvalue\nsteps: steps to take for accurace, more the steps greater the accuracy\n\n\n\n\n\n","category":"function"},{"location":"#TheAlgorithms.lu_decompose-Tuple{Any}","page":"Home","title":"TheAlgorithms.lu_decompose","text":"Decomposes a n x n non singular matrix into a lower triangular matrix (L) and an upper triangular matrix (U)\n\n\n\n\n\n","category":"method"}]
}
